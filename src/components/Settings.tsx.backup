import { useState, useRef, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Settings as SettingsIcon,
  Save,
  RefreshCw,
  Database,
  DollarSign,
  Bell,
  Shield,
  Download,
  Upload,
  Trash2,
  AlertTriangle,
  Loader2,
  User,
  Building,
  Phone,
  MapPin,
  Check,
  X,
}            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Global Save Button */}
      {hasUnsavedChanges && (
        <div className="sticky bottom-6 flex justify-center">
          <div className="flex space-x-4 p-4 bg-background border rounded-lg shadow-lg">
            <Button 
              variant="outline" 
              onClick={() => window.location.reload()}
            >
              <X className="mr-2 h-4 w-4" />
              Batal
            </Button>
            <Button 
              onClick={handleSaveSettings}
              disabled={isSaving}
              className="bg-green-600 hover:bg-green-700"
            >
              {isSaving ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  Simpan Semua Pengaturan
                </>
              )}
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};";
import { useToast } from "@/hooks/use-toast";
import { useSettings } from "@/hooks/useSettings";

export const Settings = () => {
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [systemStats, setSystemStats] = useState({
    totalRTs: 0,
    totalTransactions: 0,
    databaseSize: "0 KB",
    version: "1.0.0",
    status: "Loading...",
  });
  const [isResetDialogOpen, setIsResetDialogOpen] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const {
    wastePrices,
    appSettings,
    isLoading,
    error,
    updateWastePrice,
    updateAppSettings,
    saveSettings,
    backupData,
    restoreData,
    resetData,
    getSystemStats,
    syncData,
  } = useSettings();

  // Load system stats on component mount
  useEffect(() => {
    getSystemStats().then(setSystemStats);
  }, [getSystemStats]);

  const handleSaveSettings = async () => {
    setIsSaving(true);
    const result = await saveSettings();
    if (result.success) {
      setHasUnsavedChanges(false);
      toast({
        title: "✅ Pengaturan Disimpan",
        description: "Semua perubahan telah berhasil disimpan",
      });
    } else {
      toast({
        title: "❌ Error",
        description: result.error || "Gagal menyimpan pengaturan",
        variant: "destructive",
      });
    }
    setIsSaving(false);
  };

  const handleBackupData = async () => {
    const result = await backupData();
    if (result.success) {
      toast({
        title: "Backup Berhasil",
        description: "Data telah di-backup ke file lokal",
      });
    } else {
      toast({
        title: "Error",
        description: result.error || "Gagal membuat backup",
        variant: "destructive",
      });
    }
  };

  const handleRestoreData = () => {
    fileInputRef.current?.click();
  };

  const handleFileSelect = async (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const result = await restoreData(file);
    if (result.success) {
      toast({
        title: "Data Dipulihkan",
        description: "Data berhasil dipulihkan dari backup",
      });
      // Refresh system stats
      getSystemStats().then(setSystemStats);
    } else {
      toast({
        title: "Error",
        description: result.error || "Gagal memulihkan data",
        variant: "destructive",
      });
    }
  };

  const handleSyncData = async () => {
    const result = await syncData();
    if (result.success) {
      toast({
        title: "Sinkronisasi Berhasil",
        description: "Data telah disinkronkan dengan database",
      });
      // Refresh system stats
      getSystemStats().then(setSystemStats);
    } else {
      toast({
        title: "Error",
        description: result.error || "Gagal sinkronisasi data",
        variant: "destructive",
      });
    }
  };

  const handleResetData = async () => {
    const result = await resetData();
    if (result.success) {
      toast({
        title: "Data Direset",
        description: "Semua data telah dikembalikan ke pengaturan awal",
        variant: "destructive",
      });
      // Refresh system stats
      getSystemStats().then(setSystemStats);
      setIsResetDialogOpen(false);
    } else {
      toast({
        title: "Error",
        description: result.error || "Gagal mereset data",
        variant: "destructive",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="flex items-center space-x-2">
          <Loader2 className="h-4 w-4 animate-spin" />
          <span>Memuat pengaturan...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertTriangle className="h-12 w-12 mx-auto text-destructive mb-4" />
          <h3 className="text-lg font-medium mb-2">Error Loading Settings</h3>
          <p className="text-muted-foreground">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-start">
        <div>
          <h2 className="text-2xl font-bold">Pengaturan Sistem</h2>
          <p className="text-muted-foreground">
            Konfigurasi aplikasi dan pengaturan operasional
          </p>
        </div>
        {hasUnsavedChanges && (
          <Badge variant="secondary" className="bg-orange-100 text-orange-800">
            Ada perubahan yang belum disimpan
          </Badge>
        )}
      </div>

      <Tabs defaultValue="prices" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="prices" className="flex items-center gap-2">
            <DollarSign className="h-4 w-4" />
            <span className="hidden sm:inline">Harga</span>
          </TabsTrigger>
          <TabsTrigger value="general" className="flex items-center gap-2">
            <SettingsIcon className="h-4 w-4" />
            <span className="hidden sm:inline">Umum</span>
          </TabsTrigger>
          <TabsTrigger value="data" className="flex items-center gap-2">
            <Database className="h-4 w-4" />
            <span className="hidden sm:inline">Data</span>
          </TabsTrigger>
          <TabsTrigger value="system" className="flex items-center gap-2">
            <Shield className="h-4 w-4" />
            <span className="hidden sm:inline">Sistem</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="prices" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <DollarSign className="h-5 w-5" />
                <span>Pengaturan Harga Sampah</span>
              </CardTitle>
              <CardDescription>
                Atur harga per kilogram untuk setiap jenis sampah. Perubahan akan berpengaruh pada transaksi baru.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {wastePrices.map((waste) => (
                <div
                  key={waste.id}
                  className="flex items-center justify-between p-4 bg-accent/30 rounded-lg border border-accent/50 hover:bg-accent/40 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <DollarSign className="h-4 w-4 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">{waste.name}</p>
                      <p className="text-sm text-muted-foreground">
                        per {waste.unit}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm font-medium">Rp</span>
                    <Input
                      type="number"
                      value={waste.price}
                      onChange={(e) => {
                        updateWastePrice(waste.id, parseInt(e.target.value) || 0);
                        setHasUnsavedChanges(true);
                      }}
                      className="w-28 text-right font-medium"
                      min="0"
                    />
                  </div>
                </div>
              ))}
              <div className="pt-4 border-t">
                <Button 
                  onClick={handleSaveSettings} 
                  className="w-full" 
                  disabled={isSaving}
                >
                  {isSaving ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Menyimpan...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Simpan Harga Sampah
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="general" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* App Configuration */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Building className="h-5 w-5" />
                  <span>Informasi RW</span>
                </CardTitle>
                <CardDescription>Pengaturan identitas RW dan penanggung jawab</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="rw-name" className="flex items-center space-x-2">
                    <Building className="h-4 w-4" />
                    <span>Nama RW</span>
                  </Label>
                  <Input
                    id="rw-name"
                    value={appSettings.rwName}
                    onChange={(e) => {
                      updateAppSettings({ rwName: e.target.value });
                      setHasUnsavedChanges(true);
                    }}
                    placeholder="Contoh: RW 10 Kelurahan Sukamaju"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="contact-person" className="flex items-center space-x-2">
                    <User className="h-4 w-4" />
                    <span>Penanggung Jawab</span>
                  </Label>
                  <Input
                    id="contact-person"
                    value={appSettings.contactPerson}
                    onChange={(e) => {
                      updateAppSettings({ contactPerson: e.target.value });
                      setHasUnsavedChanges(true);
                    }}
                    placeholder="Nama lengkap penanggung jawab"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="contact-phone" className="flex items-center space-x-2">
                    <Phone className="h-4 w-4" />
                    <span>No. Telepon</span>
                  </Label>
                  <Input
                    id="contact-phone"
                    value={appSettings.contactPhone}
                    onChange={(e) => {
                      updateAppSettings({ contactPhone: e.target.value });
                      setHasUnsavedChanges(true);
                    }}
                    placeholder="08123456789"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address" className="flex items-center space-x-2">
                    <MapPin className="h-4 w-4" />
                    <span>Alamat</span>
                  </Label>
                  <Input
                    id="address"
                    value={appSettings.address}
                    onChange={(e) => {
                      updateAppSettings({ address: e.target.value });
                      setHasUnsavedChanges(true);
                    }}
                    placeholder="Alamat lengkap RW"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Notification Settings */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Bell className="h-5 w-5" />
                  <span>Pengaturan Notifikasi</span>
                </CardTitle>
                <CardDescription>Kelola notifikasi dan pemberitahuan</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-accent/30 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Bell className="h-4 w-4 text-primary" />
                      <div>
                        <p className="font-medium">Notifikasi Push</p>
                        <p className="text-sm text-muted-foreground">
                          Pemberitahuan dalam aplikasi
                        </p>
                      </div>
                    </div>
                    <Switch
                      checked={appSettings.notifications}
                      onCheckedChange={(checked) => {
                        updateAppSettings({ notifications: checked });
                        setHasUnsavedChanges(true);
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between p-3 bg-accent/30 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <User className="h-4 w-4 text-primary" />
                      <div>
                        <p className="font-medium">Laporan Email</p>
                        <p className="text-sm text-muted-foreground">
                          Kirim laporan bulanan via email
                        </p>
                      </div>
                    </div>
                    <Switch
                      checked={appSettings.emailReports}
                      onCheckedChange={(checked) => {
                        updateAppSettings({ emailReports: checked });
                        setHasUnsavedChanges(true);
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between p-3 bg-accent/30 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Phone className="h-4 w-4 text-primary" />
                      <div>
                        <p className="font-medium">WhatsApp Notifikasi</p>
                        <p className="text-sm text-muted-foreground">
                          Pemberitahuan via WhatsApp
                        </p>
                      </div>
                    </div>
                    <Switch
                      checked={appSettings.whatsappNotifications}
                      onCheckedChange={(checked) => {
                        updateAppSettings({ whatsappNotifications: checked });
                        setHasUnsavedChanges(true);
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between p-3 bg-accent/30 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Database className="h-4 w-4 text-primary" />
                      <div>
                        <p className="font-medium">Auto Backup</p>
                        <p className="text-sm text-muted-foreground">
                          Backup otomatis harian
                        </p>
                      </div>
                    </div>
                    <Switch
                      checked={appSettings.autoBackup}
                      onCheckedChange={(checked) => {
                        updateAppSettings({ autoBackup: checked });
                        setHasUnsavedChanges(true);
                      }}
                    />
                  </div>
                </div>

                <Separator />

                <div className="flex items-center justify-between p-3 bg-accent/30 rounded-lg">
                  <div>
                    <p className="font-medium">Retensi Data</p>
                    <p className="text-sm text-muted-foreground">
                      Data akan dihapus otomatis setelah periode ini
                    </p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Input
                      type="number"
                      value={appSettings.dataRetentionDays}
                      onChange={(e) => {
                        updateAppSettings({
                          dataRetentionDays: parseInt(e.target.value) || 365,
                        });
                        setHasUnsavedChanges(true);
                      }}
                      className="w-20"
                      min="30"
                      max="999"
                    />
                    <span className="text-sm">hari</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="data" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Database className="h-5 w-5" />
                <span>Manajemen Data</span>
              </CardTitle>
              <CardDescription>
                Backup, restore, dan pengelolaan data aplikasi
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <Button
                  variant="outline"
                  onClick={handleBackupData}
                  className="flex flex-col h-24 space-y-2 hover:bg-green-50 hover:border-green-200"
                >
                  <Download className="h-6 w-6 text-green-600" />
                  <span className="text-sm font-medium">Backup Data</span>
                  <span className="text-xs text-muted-foreground">Export ke file</span>
                </Button>

                <Button
                  variant="outline"
                  onClick={handleRestoreData}
                  className="flex flex-col h-24 space-y-2 hover:bg-blue-50 hover:border-blue-200"
                >
                  <Upload className="h-6 w-6 text-blue-600" />
                  <span className="text-sm font-medium">Restore Data</span>
                  <span className="text-xs text-muted-foreground">Import dari file</span>
                </Button>

                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".json"
                  onChange={handleFileSelect}
                  className="hidden"
                />

                <Button
                  variant="outline"
                  onClick={handleSyncData}
                  className="flex flex-col h-24 space-y-2 hover:bg-purple-50 hover:border-purple-200"
                >
                  <RefreshCw className="h-6 w-6 text-purple-600" />
                  <span className="text-sm font-medium">Sinkronisasi</span>
                  <span className="text-xs text-muted-foreground">Sync ke server</span>
                </Button>

                <Dialog
                  open={isResetDialogOpen}
                  onOpenChange={setIsResetDialogOpen}
                >
                  <DialogTrigger asChild>
                    <Button
                      variant="outline"
                      className="flex flex-col h-24 space-y-2 hover:bg-red-50 hover:border-red-200 border-red-200"
                    >
                      <Trash2 className="h-6 w-6 text-red-600" />
                      <span className="text-sm font-medium text-red-600">Reset Data</span>
                      <span className="text-xs text-muted-foreground">Hapus semua</span>
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle className="flex items-center space-x-2">
                        <AlertTriangle className="h-5 w-5 text-destructive" />
                        <span>Konfirmasi Reset Data</span>
                      </DialogTitle>
                      <DialogDescription>
                        Apakah Anda yakin ingin mereset semua data? Tindakan ini
                        akan:
                        <ul className="list-disc list-inside mt-2 space-y-1">
                          <li>Menghapus semua pengaturan kustom</li>
                          <li>Mengembalikan harga sampah ke default</li>
                          <li>Menghapus preferensi yang tersimpan</li>
                        </ul>
                        <p className="mt-2 font-medium text-destructive">
                          Tindakan ini tidak dapat dibatalkan!
                        </p>
                      </DialogDescription>
                    </DialogHeader>
                    <div className="flex space-x-2 justify-end">
                      <Button
                        variant="outline"
                        onClick={() => setIsResetDialogOpen(false)}
                      >
                        Batal
                      </Button>
                      <Button variant="destructive" onClick={handleResetData}>
                        Ya, Reset Data
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="system" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Shield className="h-5 w-5" />
                <span>Informasi Sistem</span>
              </CardTitle>
              <CardDescription>
                Status dan informasi teknis aplikasi
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-3 p-4 bg-accent/30 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Shield className="h-4 w-4 text-primary" />
                    <p className="text-sm font-medium">Versi Aplikasi</p>
                  </div>
                  <Badge variant="secondary" className="text-sm">
                    v{systemStats.version}
                  </Badge>
                </div>

                <div className="space-y-3 p-4 bg-accent/30 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Database className="h-4 w-4 text-primary" />
                    <p className="text-sm font-medium">Database</p>
                  </div>
                  <Badge variant="outline" className="text-sm">
                    Supabase + IndexedDB
                  </Badge>
                </div>

                <div className="space-y-3 p-4 bg-accent/30 rounded-lg">
                  <div className="flex items-center space-x-2">
                    {systemStats.status === "Online" ? (
                      <Check className="h-4 w-4 text-green-600" />
                    ) : (
                      <X className="h-4 w-4 text-red-600" />
                    )}
                    <p className="text-sm font-medium">Status</p>
                  </div>
                  <Badge
                    className={
                      systemStats.status === "Online"
                        ? "bg-green-100 text-green-800 hover:bg-green-100"
                        : "bg-red-100 text-red-800 hover:bg-red-100"
                    }
                  >
                    {systemStats.status}
                  </Badge>
                </div>

                <div className="space-y-3 p-4 bg-accent/30 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Users className="h-4 w-4 text-primary" />
                    <p className="text-sm font-medium">Total RT</p>
                  </div>
                  <p className="text-2xl font-bold text-primary">
                    {systemStats.totalRTs}
                  </p>
                </div>

                <div className="space-y-3 p-4 bg-accent/30 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Database className="h-4 w-4 text-primary" />
                    <p className="text-sm font-medium">Total Transaksi</p>
                  </div>
                  <p className="text-2xl font-bold text-primary">
                    {systemStats.totalTransactions.toLocaleString()}
                  </p>
                </div>

                <div className="space-y-3 p-4 bg-accent/30 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Shield className="h-4 w-4 text-primary" />
                    <p className="text-sm font-medium">Ukuran Database</p>
                  </div>
                  <p className="text-2xl font-bold text-primary">
                    {systemStats.databaseSize}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Global Save Button */}
      {hasUnsavedChanges && (
        <div className="sticky bottom-6 flex justify-center">
          <div className="flex space-x-4 p-4 bg-background border rounded-lg shadow-lg">
            <Button 
              variant="outline" 
              onClick={() => window.location.reload()}
            >
              <X className="mr-2 h-4 w-4" />
              Batal
            </Button>
            <Button 
              onClick={handleSaveSettings}
              disabled={isSaving}
              className="bg-green-600 hover:bg-green-700"
            >
              {isSaving ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  Simpan Semua Pengaturan
                </>
              )}
            </Button>
          </div>
        </div>
      )}
    </div>
  );
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Database className="h-5 w-5" />
            <span>Manajemen Data</span>
          </CardTitle>
          <CardDescription>
            Backup, restore, dan pengelolaan data
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button
              variant="outline"
              onClick={handleBackupData}
              className="flex flex-col h-20 space-y-2"
            >
              <Download className="h-5 w-5" />
              <span className="text-sm">Backup Data</span>
            </Button>

            <Button
              variant="outline"
              onClick={handleRestoreData}
              className="flex flex-col h-20 space-y-2"
            >
              <Upload className="h-5 w-5" />
              <span className="text-sm">Restore Data</span>
            </Button>

            <input
              ref={fileInputRef}
              type="file"
              accept=".json"
              onChange={handleFileSelect}
              className="hidden"
            />

            <Button
              variant="outline"
              onClick={handleSyncData}
              className="flex flex-col h-20 space-y-2"
            >
              <RefreshCw className="h-5 w-5" />
              <span className="text-sm">Sinkronisasi</span>
            </Button>

            <Dialog
              open={isResetDialogOpen}
              onOpenChange={setIsResetDialogOpen}
            >
              <DialogTrigger asChild>
                <Button
                  variant="destructive"
                  className="flex flex-col h-20 space-y-2"
                >
                  <Trash2 className="h-5 w-5" />
                  <span className="text-sm">Reset Data</span>
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle className="flex items-center space-x-2">
                    <AlertTriangle className="h-5 w-5 text-destructive" />
                    <span>Konfirmasi Reset Data</span>
                  </DialogTitle>
                  <DialogDescription>
                    Apakah Anda yakin ingin mereset semua data? Tindakan ini
                    akan:
                    <ul className="list-disc list-inside mt-2 space-y-1">
                      <li>Menghapus semua pengaturan kustom</li>
                      <li>Mengembalikan harga sampah ke default</li>
                      <li>Menghapus preferensi yang tersimpan</li>
                    </ul>
                    <p className="mt-2 font-medium text-destructive">
                      Tindakan ini tidak dapat dibatalkan!
                    </p>
                  </DialogDescription>
                </DialogHeader>
                <div className="flex space-x-2 justify-end">
                  <Button
                    variant="outline"
                    onClick={() => setIsResetDialogOpen(false)}
                  >
                    Batal
                  </Button>
                  <Button variant="destructive" onClick={handleResetData}>
                    Ya, Reset Data
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>

          <Separator className="my-6" />

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="font-medium">Retensi Data</p>
                <p className="text-sm text-muted-foreground">
                  Data akan dihapus otomatis setelah periode ini
                </p>
              </div>
              <div className="flex items-center space-x-2">
                <Input
                  type="number"
                  value={appSettings.dataRetentionDays}
                  onChange={(e) =>
                    updateAppSettings({
                      dataRetentionDays: parseInt(e.target.value) || 365,
                    })
                  }
                  className="w-20"
                />
                <span className="text-sm">hari</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* System Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Shield className="h-5 w-5" />
            <span>Informasi Sistem</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <p className="text-sm font-medium">Versi Aplikasi</p>
              <Badge variant="secondary">{systemStats.version}</Badge>
            </div>

            <div className="space-y-2">
              <p className="text-sm font-medium">Database</p>
              <Badge variant="outline">Supabase</Badge>
            </div>

            <div className="space-y-2">
              <p className="text-sm font-medium">Status</p>
              <Badge
                className={
                  systemStats.status === "Online"
                    ? "bg-success text-success-foreground"
                    : "bg-destructive"
                }
              >
                {systemStats.status}
              </Badge>
            </div>

            <div className="space-y-2">
              <p className="text-sm font-medium">Total RT</p>
              <p className="text-2xl font-bold">{systemStats.totalRTs}</p>
            </div>

            <div className="space-y-2">
              <p className="text-sm font-medium">Total Transaksi</p>
              <p className="text-2xl font-bold">
                {systemStats.totalTransactions}
              </p>
            </div>

            <div className="space-y-2">
              <p className="text-sm font-medium">Ukuran Database</p>
              <p className="text-2xl font-bold">{systemStats.databaseSize}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Save All Settings */}
      <div className="flex justify-end space-x-4">
        <Button variant="outline">
          <RefreshCw className="mr-2 h-4 w-4" />
          Reset ke Default
        </Button>
        <Button onClick={handleSaveSettings}>
          <Save className="mr-2 h-4 w-4" />
          Simpan Semua Pengaturan
        </Button>
      </div>
    </div>
  );
};
